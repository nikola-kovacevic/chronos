"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,r=arguments.length;i<r;i++)for(var o in s=arguments[i])Object.prototype.hasOwnProperty.call(s,o)&&(t[o]=s[o]);return t}).apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var functions_1=require("./../utils/functions"),status_1=require("./status"),History=function(){function t(t){this.history=new Map,this.undoBuffer=[],this.status=new status_1.Status(t)}return t.prototype.enable=function(){this.status.manage(!0)},t.prototype.disable=function(){this.status.manage(!1),this.undoBuffer=[],this.historyCache&&this.historyCache.clear(),this.history&&this.history.clear()},t.prototype.historize=function(i){if(this.status.get()){this.history.size||this.history.set("0",{});var t=Object.keys(i).filter(function(t){return"chronos"!==t}).map(function(t){var s;return(s={})[t]=i[t],s}).reduce(function(t,s){return Object.assign(t,s)},{});Object.keys(t).length&&!functions_1.isEquivalent(this.history.get(this.history.size.toString(10)),__assign({},t))&&this.history.set(this.history.size.toString(10),t)}},t.prototype.goBack=function(t){if(!this.status.get())throw new Error("Can't undo as Chronos is not enabled!");return void 0===this.pointer&&(this.pointer=this.history.size),this.pointer<0?null:(this.undoBuffer.push(t),this.history.get((--this.pointer).toString(10)))},t.prototype.goForward=function(){if(!this.status.get())throw new Error("Can't redo as Chronos is not enabled!");return this.undoBuffer.length?(++this.pointer,this.undoBuffer.pop()):null},t.prototype.cacheHistory=function(){this.historyCache=new Map(this.history)},t.prototype.restoreHistory=function(){this.historyCache&&(this.history=new Map(this.historyCache))},t}();exports.History=History;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXNzZXMvaGlzdG9yeS50cyJdLCJuYW1lcyI6WyJmdW5jdGlvbnNfMSIsInJlcXVpcmUiLCJzdGF0dXNfMSIsIkhpc3RvcnkiLCJlbmFibGVkIiwidGhpcyIsImhpc3RvcnkiLCJNYXAiLCJ1bmRvQnVmZmVyIiwic3RhdHVzIiwiU3RhdHVzIiwicHJvdG90eXBlIiwiZW5hYmxlIiwibWFuYWdlIiwiZGlzYWJsZSIsImhpc3RvcnlDYWNoZSIsImNsZWFyIiwiaGlzdG9yaXplIiwib2JqZWN0IiwiZ2V0Iiwic2l6ZSIsInNldCIsInN0YXRlIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImtleSIsIm1hcCIsInByb3BlcnR5IiwiX2EiLCJyZWR1Y2UiLCJyZXN1bHQiLCJjdXJyZW50IiwiYXNzaWduIiwibGVuZ3RoIiwiaXNFcXVpdmFsZW50IiwidG9TdHJpbmciLCJfX2Fzc2lnbiIsImdvQmFjayIsIkVycm9yIiwicG9pbnRlciIsInB1c2giLCJnb0ZvcndhcmQiLCJwb3AiLCJjYWNoZUhpc3RvcnkiLCJyZXN0b3JlSGlzdG9yeSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiIwVEFBQSxJQUFBQSxZQUFBQyxRQUFBLHdCQUNBQyxTQUFBRCxRQUFBLFlBZUFFLFFBQUEsV0FVRSxTQUFBQSxFQUFZQyxHQVRKQyxLQUFBQyxRQUE0QixJQUFJQyxJQU9oQ0YsS0FBQUcsV0FBb0IsR0FHMUJILEtBQUtJLE9BQVMsSUFBSVAsU0FBQVEsT0FBT04sR0E0SDdCLE9BbkhTRCxFQUFBUSxVQUFBQyxPQUFQLFdBQ0VQLEtBQUtJLE9BQU9JLFFBQU8sSUFTZFYsRUFBQVEsVUFBQUcsUUFBUCxXQUNFVCxLQUFLSSxPQUFPSSxRQUFPLEdBQ25CUixLQUFLRyxXQUFhLEdBRWRILEtBQUtVLGNBQ1BWLEtBQUtVLGFBQWFDLFFBR2hCWCxLQUFLQyxTQUNQRCxLQUFLQyxRQUFRVSxTQVdWYixFQUFBUSxVQUFBTSxVQUFQLFNBQWlCQyxHQUNmLEdBQUliLEtBQUtJLE9BQU9VLE1BQU8sQ0FDaEJkLEtBQUtDLFFBQVFjLE1BQ2hCZixLQUFLQyxRQUFRZSxJQUFJLElBQUssSUFHeEIsSUFBTUMsRUFBUUMsT0FBT0MsS0FBS04sR0FDekJPLE9BQU8sU0FBQUMsR0FBTyxNQUFRLFlBQVJBLElBQ2RDLElBQUksU0FBQUMsU0FDSCxPQUFBQyxFQUFBLElBQ0dELEdBQVdWLEVBQU9VLE9BR3RCRSxPQUFPLFNBQUNDLEVBQVFDLEdBQVksT0FBQVQsT0FBT1UsT0FBT0YsRUFBUUMsSUFBVSxJQUN6RFQsT0FBT0MsS0FBS0YsR0FBT1ksU0FBV2xDLFlBQUFtQyxhQUFhOUIsS0FBS0MsUUFBUWEsSUFBS2QsS0FBS0MsUUFBWSxLQUFFOEIsU0FBUyxLQUFJQyxTQUFBLEdBQU1mLEtBQ3JHakIsS0FBS0MsUUFBUWUsSUFBS2hCLEtBQUtDLFFBQVksS0FBRThCLFNBQVMsSUFBS2QsS0FZbERuQixFQUFBUSxVQUFBMkIsT0FBUCxTQUFjTixHQUNaLElBQUszQixLQUFLSSxPQUFPVSxNQUNmLE1BQU0sSUFBSW9CLE1BQU0seUNBT2xCLFlBSjRCLElBQWpCbEMsS0FBS21DLFVBQ2RuQyxLQUFLbUMsUUFBVW5DLEtBQUtDLFFBQVFjLE1BRzFCZixLQUFLbUMsUUFBVSxFQUNWLE1BR1RuQyxLQUFLRyxXQUFXaUMsS0FBS1QsR0FDZDNCLEtBQUtDLFFBQVFhLE9BQU9kLEtBQUttQyxTQUFTSixTQUFTLE9BUzdDakMsRUFBQVEsVUFBQStCLFVBQVAsV0FDRSxJQUFLckMsS0FBS0ksT0FBT1UsTUFDZixNQUFNLElBQUlvQixNQUFNLHlDQUdsQixPQUFJbEMsS0FBS0csV0FBVzBCLFVBQ2hCN0IsS0FBS21DLFFBQ0FuQyxLQUFLRyxXQUFXbUMsT0FHbEIsTUFTRnhDLEVBQUFRLFVBQUFpQyxhQUFQLFdBQ0V2QyxLQUFLVSxhQUFlLElBQUlSLElBQUlGLEtBQUtDLFVBUzVCSCxFQUFBUSxVQUFBa0MsZUFBUCxXQUNNeEMsS0FBS1UsZUFDUFYsS0FBS0MsUUFBVSxJQUFJQyxJQUFJRixLQUFLVSxnQkFJbENaLEVBdklBLEdBQWEyQyxRQUFBM0MsUUFBQUEiLCJmaWxlIjoiY2xhc3Nlcy9oaXN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFcXVpdmFsZW50IH0gZnJvbSAnLi8uLi91dGlscy9mdW5jdGlvbnMnO1xyXG5pbXBvcnQgeyBTdGF0dXMgfSBmcm9tICcuL3N0YXR1cyc7XHJcblxyXG5pbnRlcmZhY2UgSGlzdG9yaWVzIHtcclxuICBlbmFibGUoKSA6IHZvaWQ7XHJcbiAgZGlzYWJsZSgpIDogdm9pZDtcclxuXHJcbiAgaGlzdG9yaXplKG9iamVjdDogYW55KSA6IHZvaWQ7XHJcblxyXG4gIGdvQmFjayhjdXJyZW50OiBhbnkpOiBhbnk7XHJcbiAgZ29Gb3J3YXJkKCk6IGFueTtcclxuXHJcbiAgY2FjaGVIaXN0b3J5KCk6IHZvaWQ7XHJcbiAgcmVzdG9yZUhpc3RvcnkoKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhpc3RvcnkgaW1wbGVtZW50cyBIaXN0b3JpZXMge1xyXG4gIHByaXZhdGUgaGlzdG9yeTogTWFwPHN0cmluZywgYW55PiA9IG5ldyBNYXAoKTtcclxuICBwcml2YXRlIGhpc3RvcnlDYWNoZTogTWFwPHN0cmluZywgYW55PjtcclxuXHJcbiAgcHJpdmF0ZSBwb2ludGVyOiBudW1iZXI7XHJcblxyXG4gIHByaXZhdGUgc3RhdHVzOiBTdGF0dXM7XHJcblxyXG4gIHByaXZhdGUgdW5kb0J1ZmZlcjogYW55W10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoZW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5zdGF0dXMgPSBuZXcgU3RhdHVzKGVuYWJsZWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZW5hYmxlIC0gZW5hYmxlcyBzdG9yaW5nIG9mIGhpc3RvcnkgYW5kIG5hdmlnYXRpbmcgdGhyb3VnaCBpdFxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqIEByZXR1cm4ge3ZvaWR9IHZvaWRcclxuICAgKiBAZXhhbXBsZSBlbmFibGUoKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmFibGUoKSB7XHJcbiAgICB0aGlzLnN0YXR1cy5tYW5hZ2UodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBkaXNhYmxlIC0gZGlzYWJsZXMgc3RvcmluZyBvZiBoaXN0b3J5IGFuZCBuYXZpZ2F0aW5nIHRocm91Z2ggaXRcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKiBAcmV0dXJuIHt2b2lkfSB2b2lkXHJcbiAgICogQGV4YW1wbGUgZGlzYWJsZSgpXHJcbiAgICovXHJcbiAgcHVibGljIGRpc2FibGUoKSB7XHJcbiAgICB0aGlzLnN0YXR1cy5tYW5hZ2UoZmFsc2UpO1xyXG4gICAgdGhpcy51bmRvQnVmZmVyID0gW107XHJcblxyXG4gICAgaWYgKHRoaXMuaGlzdG9yeUNhY2hlKSB7XHJcbiAgICAgIHRoaXMuaGlzdG9yeUNhY2hlLmNsZWFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaGlzdG9yeSkge1xyXG4gICAgICB0aGlzLmhpc3RvcnkuY2xlYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGhpc3Rvcml6ZSAtIHN0b3JlcyBvYmplY3QgaW4gaGlzdG9yeSBiZWZvcmUgY2hhbmdpbmcgaXQncyB2YWx1ZXNcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKiBAcHJvcGVydHkge2FueX0gb2JqZWN0IC0gT2JqZWN0IHRvIGJlIGhpc3Rvcml6ZWRcclxuICAgKiBAcmV0dXJuIHt2b2lkfSB2b2lkXHJcbiAgICogQGV4YW1wbGUgaGlzdG9yaXplKHsgYTogMSwgYjogMiwgY2hyb25vczoge30gfSlcclxuICAgKi9cclxuICBwdWJsaWMgaGlzdG9yaXplKG9iamVjdDogYW55KSB7XHJcbiAgICBpZiAodGhpcy5zdGF0dXMuZ2V0KCkpIHtcclxuICAgICAgaWYgKCF0aGlzLmhpc3Rvcnkuc2l6ZSkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5zZXQoJzAnLCB7fSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHN0YXRlID0gT2JqZWN0LmtleXMob2JqZWN0KVxyXG4gICAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09ICdjaHJvbm9zJylcclxuICAgICAgLm1hcChwcm9wZXJ0eSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIFtwcm9wZXJ0eV06IG9iamVjdFtwcm9wZXJ0eV0sXHJcbiAgICAgICAgfTtcclxuICAgICAgfSlcclxuICAgICAgLnJlZHVjZSgocmVzdWx0LCBjdXJyZW50KSA9PiBPYmplY3QuYXNzaWduKHJlc3VsdCwgY3VycmVudCksIHt9KTtcclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGggJiYgIWlzRXF1aXZhbGVudCh0aGlzLmhpc3RvcnkuZ2V0KCh0aGlzLmhpc3Rvcnkuc2l6ZSkudG9TdHJpbmcoMTApKSwgey4uLnN0YXRlfSkpIHtcclxuICAgICAgICB0aGlzLmhpc3Rvcnkuc2V0KCh0aGlzLmhpc3Rvcnkuc2l6ZSkudG9TdHJpbmcoMTApLCBzdGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdvQmFjayAtIG1vdmVzIG9iamVjdCBvbmUgc3RlcCBiYWNrIGluIGhpc3RvcnlcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKiBAcHJvcGVydHkge2FueX0gY3VycmVudCAtIEN1cnJlbnQgb2JqZWN0IHN0YXRlXHJcbiAgICogQHJldHVybiB7YW55fSBQcmV2aW91cyBzdGF0ZSBpZiBhdmFpbGFibGVcclxuICAgKiBAZXhhbXBsZSBnb0JhY2soeyBhOiAxLCBiOiAyIH0pXHJcbiAgICovXHJcbiAgcHVibGljIGdvQmFjayhjdXJyZW50OiBhbnkpIHtcclxuICAgIGlmICghdGhpcy5zdGF0dXMuZ2V0KCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHVuZG8gYXMgQ2hyb25vcyBpcyBub3QgZW5hYmxlZCEnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHRoaXMucG9pbnRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy5wb2ludGVyID0gdGhpcy5oaXN0b3J5LnNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucG9pbnRlciA8IDApIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy51bmRvQnVmZmVyLnB1c2goY3VycmVudCk7XHJcbiAgICByZXR1cm4gdGhpcy5oaXN0b3J5LmdldCgoLS10aGlzLnBvaW50ZXIpLnRvU3RyaW5nKDEwKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBnb0ZvcndhcmQgLSBnZXRzIGxhc3Qgc3RhdGUgZnJvbSB1bmRvIGJ1ZmZlclxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqIEByZXR1cm4ge2FueX0gU3RhdGUgZnJvbSB1bmRvIGJ1ZmZlclxyXG4gICAqIEBleGFtcGxlIGdvRm9yd2FyZCgpXHJcbiAgICovXHJcbiAgcHVibGljIGdvRm9yd2FyZCgpIHtcclxuICAgIGlmICghdGhpcy5zdGF0dXMuZ2V0KCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHJlZG8gYXMgQ2hyb25vcyBpcyBub3QgZW5hYmxlZCEnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy51bmRvQnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICArK3RoaXMucG9pbnRlcjtcclxuICAgICAgcmV0dXJuIHRoaXMudW5kb0J1ZmZlci5wb3AoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNhY2hlSGlzdG9yeSAtIGNhY2hlcyBoaXN0b3J5IHRvIGJlIHJlc3RvcmVkIGxhdGVyXHJcbiAgICogQGZ1bmN0aW9uXHJcbiAgICogQHJldHVybiB7dm9pZH0gdm9pZFxyXG4gICAqIEBleGFtcGxlIGNhY2hlSGlzdG9yeSgpXHJcbiAgICovXHJcbiAgcHVibGljIGNhY2hlSGlzdG9yeSgpIHtcclxuICAgIHRoaXMuaGlzdG9yeUNhY2hlID0gbmV3IE1hcCh0aGlzLmhpc3RvcnkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVzdG9yZUhpc3RvcnkgLSByZXN0b3JlcyBoaXN0b3J5IGZyb20gY2FjaGUgaWYgaGlzdG9yeSBpcyBjYWNoZWRcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKiBAcmV0dXJuIHt2b2lkfSB2b2lkXHJcbiAgICogQGV4YW1wbGUgcmVzdG9yZUhpc3RvcnkoKVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXN0b3JlSGlzdG9yeSgpIHtcclxuICAgIGlmICh0aGlzLmhpc3RvcnlDYWNoZSkge1xyXG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgTWFwKHRoaXMuaGlzdG9yeUNhY2hlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59Il19
